(function() {
  var EventEmitter, ee, low, underdb, util, _;

  EventEmitter = require('events').EventEmitter;

  util = require('util');

  _ = require('lodash');

  underdb = require('underscore.db');

  underdb.mixWith(_);

  ee = new EventEmitter();

  _.mixin({
    get: _.wrap(_.get, function(get, coll, id) {
      var obj, _ref;
      obj = (_ref = coll._index) != null ? _ref[id] : void 0;
      obj || (obj = get(coll, id));
      return obj;
    }),
    insert: _.wrap(_.insert, function(insert, coll, doc) {
      insert(coll, doc);
      ee.emit('add', low._currentCollName, doc);
      return doc;
    }),
    update: _.wrap(_.update, function(update, coll, id, attrs) {
      var doc, previousDoc;
      previousDoc = _.get(coll, id);
      if (previousDoc) {
        previousDoc = _.clone(previousDoc);
      }
      doc = update(coll, id, attrs);
      if (doc) {
        ee.emit('update', low._currentCollName, doc, previousDoc);
      }
      return doc;
    }),
    updateWhere: _.wrap(_.updateWhere, function(updateWhere, coll, whereAttrs, attrs) {
      var docs, previousDocs;
      previousDocs = _.where(coll, whereAttrs);
      previousDocs = _.clone(previousDocs);
      docs = updateWhere(coll, whereAttrs, attrs);
      if (docs.length > 0) {
        ee.emit('update', low._currentCollName, docs, previousDocs);
      }
      return docs;
    }),
    remove: _.wrap(_.remove, function(remove, coll, id) {
      var doc;
      doc = remove(coll, id);
      if (doc) {
        ee.emit('remove', low._currentCollName, doc);
      }
      return doc;
    }),
    removeWhere: _.wrap(_.removeWhere, function(removeWhere, coll, whereAttrs) {
      var docs;
      docs = removeWhere(coll, whereAttrs);
      if (docs.length > 0) {
        ee.emit('remove', low._currentCollName, docs);
      }
      return docs;
    })
  });

  low = function(str, arg1, arg2) {
    var chain, _base;
    low._currentCollName = str;
    (_base = low.db)[str] || (_base[str] = []);
    chain = _(low.db[str]);
    if (arg2) {
      if (arg2 === 1) {
        return chain.insert(arg1).value();
      }
      if (arg2 === -1) {
        if (_.isString(arg1)) {
          return chain.remove(arg1).value();
        }
        if (_.isObject(arg1)) {
          return chain.removeWhere(arg1).value();
        }
      }
      if (_.isObject(arg2)) {
        return chain.updateWhere(arg1, arg2).value();
      }
    }
    if (arg1) {
      if (_.isString(arg1)) {
        return chain.get(arg1).value();
      }
      if (_.isObject(arg1)) {
        return chain.where(arg1).value();
      }
    }
    return chain;
  };

  low.db = {};

  low.path = 'db.json';

  low.autoSave = true;

  low.save = function(path) {
    if (path == null) {
      path = low.path;
    }
    underdb.save(low.db, path);
    return low;
  };

  low.throttledSave = _.throttle(low.save, 100);

  low.load = function(path) {
    if (path == null) {
      path = low.path;
    }
    low.db = underdb.load(path);
    return low;
  };

  low.on = function(event, listener) {
    ee.on(event, listener);
    return low;
  };

  low._ = _;

  low.on('add', function() {
    return ee.emit('change');
  });

  low.on('update', function() {
    return ee.emit('change');
  });

  low.on('remove', function() {
    return ee.emit('change');
  });

  low.on('change', function() {
    if (low.autoSave) {
      return low.throttledSave();
    }
  });

  low.on('add', function(name, obj) {
    var coll;
    coll = low(name).value();
    coll._index || (coll._index = {});
    return coll._index[obj.id] = obj;
  });

  low.on('remove', function(name, obj) {
    var coll;
    coll = low(name).value();
    if (coll._index) {
      return delete coll._index[obj.id];
    }
  });

  low.ee = ee;

  module.exports = low;

}).call(this);
